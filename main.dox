/*

$Id: main.dox 3403 2012-01-28 08:11:38Z adeguet1 $

*/

/*!
  \mainpage CISST

  The cisst package is a collection of libraries designed to ease the
  development of computer assisted intervention systems.  See the
  modules for detailled documentation.

  The cisst package is released under the following terms:
  <pre>
CISST Software License Agreement

Version 1.0 (October 30, 2006)

PURPOSE

The Johns Hopkins University's Engineering Research Center for
Computer-Integrated Surgical Systems and Technology (CISST ERC) has
developed a software package ("CISST") that provides C++ libraries to
facilitate the development of computer-integrated surgery systems.
This Software License Agreement ("Agreement") covers downloads from
the CISST package maintained by The Johns Hopkins University ("JHU").
If you distribute Software (as defined below) downloaded from CISST,
all of the paragraphs of this Agreement must be included with and
apply to such Software.

Your downloading, copying, modifying, displaying, distributing or use
of any software, documentation, and/or data from CISST (collectively,
the "Software") constitutes acceptance of all of the terms and
conditions of this Agreement. If you do not agree to such terms and
conditions, you have no right to download, copy, modify, display,
distribute or use the Software.

DOWNLOADING AGREEMENT - License from JHU with Right to Sublicense
("Software License").

1. As used in this Software License, "you" means the individual
   downloading and/or using, reproducing, modifying, displaying and/or
   distributing the Software and the institution or entity which
   employs or is otherwise affiliated with such individual in
   connection therewith. The Johns Hopkins University ("JHU") hereby
   grants you, with right to sublicense, with respect to JHU's rights
   in the software, documentation, and data, if any, which is the
   subject of this Software License (collectively, the "Software"), a
   royalty-free, non-exclusive license to use, reproduce, make
   derivative works of, display and distribute the Software, provided
   that:

   (a) you accept and adhere to all of the terms and conditions of
       this Software License;

   (b) in connection with any copy of or sublicense of all or any
       portion of the Software, all of the terms and conditions in
       this Software License shall appear in and shall apply to such
       copy and such sublicense, including without limitation all
       source and executable forms and on any user documentation that
       includes license information, prefaced with the following
       words: "All or portions of this licensed product have been
       obtained under license from The Johns Hopkins University and
       are subject to the following terms and conditions:"

   (c) you preserve and maintain all applicable attributions,
       copyright notices and licenses included in or applicable to the
       Software;

   (d) modified versions of the Software must be clearly identified
       and marked as such, and must not be misrepresented as being the
       original Software; and

   (e) you consider making, but are under no obligation to make, the
       source code of any of your modifications to the Software freely
       available to others on an open source basis.

2. The license granted in this Software License includes without
   limitation the right to (i) incorporate the Software into
   proprietary programs (subject to any restrictions applicable to
   such programs), (ii) add your own copyright statement to your
   modifications of the Software, and (iii) provide additional or
   different license terms and conditions in your sublicenses of
   modifications of the Software; provided that in each case your use,
   reproduction or distribution of such modifications otherwise
   complies with the conditions stated in this Software License.

3. This Software License does not grant any rights with respect to
   third party software, except those rights that JHU has been
   authorized by a third party to grant to you, and accordingly you
   are solely responsible for (i) obtaining any permissions from third
   parties that you need to use, reproduce, make derivative works of,
   display and distribute the Software, and (ii) informing your
   sublicensees, including without limitation your end-users, of their
   obligations to secure any such required permissions.

4. The Software, as provided by JHU, was designed for research
   purposes only and was not reviewed or approved by the Food and Drug
   Administration or by any other agency. YOU ACKNOWLEDGE AND AGREE
   THAT CLINICAL USE OF THE JHU SOFTWARE IS NEITHER RECOMMENDED NOR
   ADVISED. Any modification or commercialization of the Software,
   whether for clinical use or otherwise, is at the sole risk of the
   party or parties engaged therein. You further agree to use,
   reproduce, make derivative works of, display and distribute the
   Software in compliance with all applicable governmental laws,
   regulations and orders, including without limitation those relating
   to export and import control.

5. The Software is provided "AS IS" and neither JHU nor any
   contributor to the software (each a "Contributor") shall have any
   obligation to provide maintenance, support, updates, enhancements
   or modifications thereto. JHU AND ALL CONTRIBUTORS MAKE NO WARRANTY
   THAT ALL ERRORS, BUGS, DEFICIENCIES, DEFECTS AND MALFUNCTIONS HAVE
   BEEN OR CAN BE ELIMINATED FROM THE SOFTWARE, AND, JHU AND ALL
   CONTRIBUTORS SHALL IN NO EVENT BE RESPONSIBLE FOR LOSSES OF ANY
   KIND RESULTING FROM THE USE OF THE SOFTWARE, OR ANY PART THEREOF,
   INCLUDING, WITHOUT LIMITATION ANY LIABILITY FOR BUSINESS EXPENSE,
   MACHINE DOWNTIME, OR DAMAGES CAUSED TO LICENSEE BY ANY ERROR, BUG,
   DEFICIENCY, DEFECT OR MALFUNCITON.  JHU AND ALL CONTRIBUTORS
   SPECIFICALLY DISCLAIM ALL EXPRESS AND IMPLIED WARRANTIES OF ANY
   KIND INCLUDING, BUT NOT LIMITED TO, ANY WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NON-INFRINGEMENT. IN NO EVENT SHALL JHU OR ANY CONTRIBUTOR BE
   LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL,
   EXEMPLARY OR CONSEQUENTIAL DAMAGES HOWEVER CAUSED AND ON ANY THEORY
   OF LIABILITY ARISING IN ANY WAY RELATED TO THE SOFTWARE, EVEN IF
   JHU OR ANY CONTRIBUTOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
   DAMAGES. TO THE MAXIMUM EXTENT NOT PROHIBITED BY LAW OR REGULATION,
   YOU FURTHER ASSUME ALL LIABILITY FOR YOUR USE, REPRODUCTION, MAKING
   OF DERIVATIVE WORKS, DISPLAY, LICENSE OR DISTRIBUTION OF THE
   SOFTWARE AND AGREE TO INDEMNIFY AND HOLD HARMLESS JHU AND ALL
   CONTRIBUTORS FROM AND AGAINST ANY AND ALL CLAIMS, SUITS, ACTIONS,
   DEMANDS AND JUDGMENTS ARISING THEREFROM.

6. None of the names, logos or trademarks of JHU or any of JHU's
   affiliates or any of the Contributors, or any funding agency, may
   be used to endorse or promote products produced in whole or in part
   by operation of the Software or derived from or based on the
   Software without specific prior written permission from the
   applicable party.

7. Any use, reproduction or distribution of the Software which is not
   in accordance with this Software License shall automatically revoke
   all rights granted to you under this Software License.

8. This Software License does not grant any rights in or to any
   intellectual property owned by JHU or any Contributor except those
   rights expressly granted hereunder.

MISCELLANEOUS

This Agreement shall be governed by and construed in accordance with
the laws of The State of Maryland without regard to principles of
conflicts of law. As specifically provided by MD. Anno. Code, CL,
Section 21-104, the Parties agree that this Agreement shall not be
governed by the Uniform Computer Information Transactions Act (UCITA)
as adopted in Maryland under Title 21 of the Commercial Law Article of
the Maryland Annotated Code, as amended from time to time.  This
agreement shall be governed by the common law of Maryland relating to
written agreements, as well as other statutory provisions, other than
UCITA which may apply, and shall be interpreted and enforced as if
UCITA had never been adopted in Maryland.  The Parties further agree
that electronic self-help shall not be permitted under this Agreement.
This Agreement shall supersede and replace any license terms that you
may have agreed to previously with respect to CISST.

This Software License was derived, with permission, from the 3D Slicer
Software License Agreement, Version 1.0 (December 20, 2005), created
by The Brigham & Women's Hospital, Inc.

  </pre>
*/

/*!
  \defgroup cisstCommon cisstCommon

  Common tools used for most CISST applications.  The main features of
  cisstCommon are:

  - A log system.  There is a set of classes and macros which allows
    the user to log some text information to any c++ stream, including
    a file or stdout.  For further details, see cmnLogger,
    cmnClassRegister and
    cmnClassServices.

  - A random sequence generator. For more information, see
    cmnRandomSequence.

  - A type trait class used to define common values for different
    types (e.g. default tolerance for float, double, int).  See
    cmnTypeTraits.

  - A path search class, see cmnPath.

  - XML Path wrappers using either LibXML2 (preferred) or Qt XML.  See
    cmnXMLPath.

  \note
  All the classes and global functions of cisstCommon start with the
  prefix cmn.  To use cisstCommon, you can either include a specific
  file with:
  \code
  #include <cisstCommon/cmnXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstCommon.h>
  \endcode
*/


/*!
  \defgroup cisstVector cisstVector

  Vectors and matrices, including all the tools for simple 3D
  computations.  The main features of cisstVector are:

  - A set of containers for fixed size vectors and matrices.  For more
    information, see vctFixedSizeVector and vctFixedSizeMatrix.

  - A set of containers for dynamic vectors, matrices and multi
    dimensional arrays (nArrays).  For more information, see
    vctDynamicVector, vctDynamicMatrix and vctDynamicNArray.

  - A set of classes to overlay vectors, matrices and nArrays over
    existing cisst containers or data sets allocated using other
    toolkits or libraries (VTK, OpenGL, Fortran).  See
    vctFixedSizeConstVectorRef, vctFixedSizeVectorRef,
    vctFixedSizeConstMatrixRef, vctFixedSizeMatrixRef,
    vctDynamicConstVectorRef, vctDynamicVectorRef,
    vctDynamicConstMatrixRef, vctDynamicMatrixRef,
    vctDynamicConstNArrayRef and vctDynamicNArrayRef.

  - A definition of a frame based on a translation and a rotation
    (represented either by a matrix in 2D/3D or a quaternion in 3D).
    See vctQuaternionRotation3, vctMatrixRotation3,
    vctRodriguezRotation3, vctAxisAngleRotation3, vctAngleRotation2,
    vctMatrixRotation2 and vctFrameBase.

  - A user friendly API for the most commonly used vectors.  For more
    information, see ::vctDouble2 (::vct2), ::vctFloat3,
    ::vctDouble3x3 (::vct2), ::vctInt3x3, ::vctAxAnRot3,
    ::vctQuatRot3, ::vctFrm3, etc.  The complete lists of defined types
    can be found in:
    <ul>
      <li>vctFixedSizeVectorTypes.h
      <li>vctFixedSizeMatrixTypes.h
      <li>vctDynamicVectorTypes.h
      <li>vctDynamicMatrixTypes.h
      <li>vctTransformationTypes.h
    </ul>

  - Some functions for cisstVector classes such as ::vctRandom.

  \note
  All the classes and global functions of cisstVector start with the
  prefix vct.  To use cisstVector, you can either include a specific
  file with:
  \code
  #include <cisstVector/vctXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstVector.h>
  \endcode
*/


/*!
  \defgroup cisstNumerical cisstNumerical

  The main features of cisstNumerical are:

  - nmrStandardPolynomial and nmrBernsteinPolynomial.

  - Specialized functions for fixed size containers.  These
    functions have been written to take into account a specific
    dimension or size and therefore avoid loops as much as possible.
    They tend to be faster than their LAPACK based conterparts.
    <ul>
    <li>::nmrGaussJordanInverse2x2
    <li>::nmrGaussJordanInverse3x3
    <li>::nmrGaussJordanInverse4x4
    </ul>

  - Functions and classes for linear algebra.  These functions can
    handle both fixed size and dynamic containers.  Some basic
    functions have been implemented using cisst only while
    others are wrappers for existing Fortran code.  Please note that
    the Fortran wrappers are compiled only if either
    CISST_HAS_CNETLIB or CISST_HAS_CISSTNETLIB has been set during the
    CMake configuration of cisst (see http://www.cisst.org/cnetlib).
    <ul>
    <li>cisst native functionalities:
      <ul>
      <li>::nmrIsOrthonormal (with nmrIsOrthonormalDynamicData and nmrIsOrthonormalFixedSizeData)
      </ul>

    <li>Fortran wrappers:
      <ul>
      <li>::nmrInverse (with nmrInverseDynamicData and nmrInverseFixedSizeData)
      <li>::nmrLU (with nmrLUDynamicData and nmrLUFixedSizeData)
      <li>::nmrPInverse (with nmrPInverseDynamicData and nmrPInverseFixedSizeData)
      <li>::nmrPInverseEconomy (with nmrPInverseEconomyDynamicData)
      <li>::nmrSVD (with nmrSVDDynamicData and nmrSVDFixedSizeData)
      <li>::nmrSVDEconomy (with nmrSVDEconomyDynamicData)
      </ul>
    </ul>

  - Some basic registration methods.  See nmrRegistrationRigid.

  \note
  All the classes and global functions of cisstNumerical start with
  the prefix nmr.  To use cisstNumerical, you can either include a
  specific file with:
  \code
  #include <cisstNumerical/nmrXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstNumerical.h>
  \endcode
*/


/*!
  \defgroup cisstInteractive cisstInteractive

  A collection of Python scripts and C++ classes to start a Python
  interactive shell from a C++ application.  See mainly ireFramework.

  \note
  All the classes and global functions of cisstInteractive start with
  the prefix ire.  To use cisstInteractive, you can either include a
  specific file with:
  \code
  #include <cisstInteractive/ireXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstInteractive.h>
  \endcode
*/


/*!
  \defgroup cisstOSAbstraction cisstOSAbstraction

  \note
  All the classes and global functions of cisstOSAbstraction start with
  the prefix osa.  To use cisstOSAbstraction, you can either include the
  files one by one with:
  \code
  #include <cisstOSAbstraction/osaXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstOSAbstraction.h>
  \endcode
*/


/*!
  \defgroup cisstMultiTask cisstMultiTask

  Component based framework.

  \note
  All the classes and global functions of cisstMultiTask start with
  the prefix mts.  To use cisstMultiTask, you can either include a
  specific file with:
 \code
  #include <cisstMultiTask/mtsXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstMultiTask.h>
  \endcode
*/


/*!
  \defgroup cisstParameterTypes cisstParameterTypes

  \note
  All the classes and global functions of cisstParameterTypes start with
  the prefix prm.  To use cisstParameterTypes, you can either include a
  specific file with:
 \code
  #include <cisstParameterTypes/prmXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstParameterTypes.h>
  \endcode
*/


/*!
  \defgroup cisstStereoVision cisstStereoVision

  \note
  All the classes and global functions of cisstStereoVision start with
  the prefix svl.  To use cisstStereoVision, you can either include a
  specific file with:
 \code
  #include <cisstStereoVision/svlXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstStereoVision.h>
  \endcode
*/
